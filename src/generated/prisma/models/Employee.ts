
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Employee` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Employee
 * 
 */
export type EmployeeModel = runtime.Types.Result.DefaultSelection<Prisma.$EmployeePayload>

export type AggregateEmployee = {
  _count: EmployeeCountAggregateOutputType | null
  _min: EmployeeMinAggregateOutputType | null
  _max: EmployeeMaxAggregateOutputType | null
}

export type EmployeeMinAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
  phone: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmployeeMaxAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
  phone: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmployeeCountAggregateOutputType = {
  id: number
  name: number
  email: number
  phone: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EmployeeMinAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phone?: true
  createdAt?: true
  updatedAt?: true
}

export type EmployeeMaxAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phone?: true
  createdAt?: true
  updatedAt?: true
}

export type EmployeeCountAggregateInputType = {
  id?: true
  name?: true
  email?: true
  phone?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EmployeeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Employee to aggregate.
   */
  where?: Prisma.EmployeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Employees to fetch.
   */
  orderBy?: Prisma.EmployeeOrderByWithRelationInput | Prisma.EmployeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmployeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Employees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Employees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Employees
  **/
  _count?: true | EmployeeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmployeeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmployeeMaxAggregateInputType
}

export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
      [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmployee[P]>
    : Prisma.GetScalarType<T[P], AggregateEmployee[P]>
}




export type EmployeeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmployeeWhereInput
  orderBy?: Prisma.EmployeeOrderByWithAggregationInput | Prisma.EmployeeOrderByWithAggregationInput[]
  by: Prisma.EmployeeScalarFieldEnum[] | Prisma.EmployeeScalarFieldEnum
  having?: Prisma.EmployeeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmployeeCountAggregateInputType | true
  _min?: EmployeeMinAggregateInputType
  _max?: EmployeeMaxAggregateInputType
}

export type EmployeeGroupByOutputType = {
  id: string
  name: string
  email: string
  phone: string
  createdAt: Date
  updatedAt: Date
  _count: EmployeeCountAggregateOutputType | null
  _min: EmployeeMinAggregateOutputType | null
  _max: EmployeeMaxAggregateOutputType | null
}

type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmployeeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmployeeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmployeeGroupByOutputType[P]>
      }
    >
  >



export type EmployeeWhereInput = {
  AND?: Prisma.EmployeeWhereInput | Prisma.EmployeeWhereInput[]
  OR?: Prisma.EmployeeWhereInput[]
  NOT?: Prisma.EmployeeWhereInput | Prisma.EmployeeWhereInput[]
  id?: Prisma.StringFilter<"Employee"> | string
  name?: Prisma.StringFilter<"Employee"> | string
  email?: Prisma.StringFilter<"Employee"> | string
  phone?: Prisma.StringFilter<"Employee"> | string
  createdAt?: Prisma.DateTimeFilter<"Employee"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Employee"> | Date | string
}

export type EmployeeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.EmployeeWhereInput | Prisma.EmployeeWhereInput[]
  OR?: Prisma.EmployeeWhereInput[]
  NOT?: Prisma.EmployeeWhereInput | Prisma.EmployeeWhereInput[]
  name?: Prisma.StringFilter<"Employee"> | string
  phone?: Prisma.StringFilter<"Employee"> | string
  createdAt?: Prisma.DateTimeFilter<"Employee"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Employee"> | Date | string
}, "id" | "email">

export type EmployeeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EmployeeCountOrderByAggregateInput
  _max?: Prisma.EmployeeMaxOrderByAggregateInput
  _min?: Prisma.EmployeeMinOrderByAggregateInput
}

export type EmployeeScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmployeeScalarWhereWithAggregatesInput | Prisma.EmployeeScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmployeeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmployeeScalarWhereWithAggregatesInput | Prisma.EmployeeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Employee"> | string
  name?: Prisma.StringWithAggregatesFilter<"Employee"> | string
  email?: Prisma.StringWithAggregatesFilter<"Employee"> | string
  phone?: Prisma.StringWithAggregatesFilter<"Employee"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Employee"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Employee"> | Date | string
}

export type EmployeeCreateInput = {
  id?: string
  name: string
  email: string
  phone: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmployeeUncheckedCreateInput = {
  id?: string
  name: string
  email: string
  phone: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmployeeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmployeeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmployeeCreateManyInput = {
  id?: string
  name: string
  email: string
  phone: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmployeeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmployeeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmployeeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmployeeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmployeeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type EmployeeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["employee"]>

export type EmployeeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["employee"]>

export type EmployeeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["employee"]>

export type EmployeeSelectScalar = {
  id?: boolean
  name?: boolean
  email?: boolean
  phone?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EmployeeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "email" | "phone" | "createdAt" | "updatedAt", ExtArgs["result"]["employee"]>

export type $EmployeePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Employee"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    email: string
    phone: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["employee"]>
  composites: {}
}

export type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmployeePayload, S>

export type EmployeeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmployeeCountAggregateInputType | true
  }

export interface EmployeeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
  /**
   * Find zero or one Employee that matches the filter.
   * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
   * @example
   * // Get one Employee
   * const employee = await prisma.employee.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmployeeFindUniqueArgs>(args: Prisma.SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmployeeClient<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
   * @example
   * // Get one Employee
   * const employee = await prisma.employee.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmployeeClient<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Employee that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
   * @example
   * // Get one Employee
   * const employee = await prisma.employee.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmployeeFindFirstArgs>(args?: Prisma.SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmployeeClient<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Employee that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
   * @example
   * // Get one Employee
   * const employee = await prisma.employee.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmployeeClient<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Employees that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Employees
   * const employees = await prisma.employee.findMany()
   * 
   * // Get first 10 Employees
   * const employees = await prisma.employee.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmployeeFindManyArgs>(args?: Prisma.SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Employee.
   * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
   * @example
   * // Create one Employee
   * const Employee = await prisma.employee.create({
   *   data: {
   *     // ... data to create a Employee
   *   }
   * })
   * 
   */
  create<T extends EmployeeCreateArgs>(args: Prisma.SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma.Prisma__EmployeeClient<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Employees.
   * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
   * @example
   * // Create many Employees
   * const employee = await prisma.employee.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmployeeCreateManyArgs>(args?: Prisma.SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Employees and returns the data saved in the database.
   * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
   * @example
   * // Create many Employees
   * const employee = await prisma.employee.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Employees and only return the `id`
   * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Employee.
   * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
   * @example
   * // Delete one Employee
   * const Employee = await prisma.employee.delete({
   *   where: {
   *     // ... filter to delete one Employee
   *   }
   * })
   * 
   */
  delete<T extends EmployeeDeleteArgs>(args: Prisma.SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma.Prisma__EmployeeClient<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Employee.
   * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
   * @example
   * // Update one Employee
   * const employee = await prisma.employee.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmployeeUpdateArgs>(args: Prisma.SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma.Prisma__EmployeeClient<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Employees.
   * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
   * @example
   * // Delete a few Employees
   * const { count } = await prisma.employee.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmployeeDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Employees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Employees
   * const employee = await prisma.employee.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmployeeUpdateManyArgs>(args: Prisma.SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Employees and returns the data updated in the database.
   * @param {EmployeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
   * @example
   * // Update many Employees
   * const employee = await prisma.employee.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Employees and only return the `id`
   * const employeeWithIdOnly = await prisma.employee.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmployeeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Employee.
   * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
   * @example
   * // Update or create a Employee
   * const employee = await prisma.employee.upsert({
   *   create: {
   *     // ... data to create a Employee
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Employee we want to update
   *   }
   * })
   */
  upsert<T extends EmployeeUpsertArgs>(args: Prisma.SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma.Prisma__EmployeeClient<runtime.Types.Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Employees.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
   * @example
   * // Count the number of Employees
   * const count = await prisma.employee.count({
   *   where: {
   *     // ... the filter for the Employees we want to count
   *   }
   * })
  **/
  count<T extends EmployeeCountArgs>(
    args?: Prisma.Subset<T, EmployeeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmployeeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Employee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmployeeAggregateArgs>(args: Prisma.Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

  /**
   * Group by Employee.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmployeeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmployeeGroupByArgs['orderBy'] }
      : { orderBy?: EmployeeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Employee model
 */
readonly fields: EmployeeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Employee.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Employee model
 */
export interface EmployeeFieldRefs {
  readonly id: Prisma.FieldRef<"Employee", 'String'>
  readonly name: Prisma.FieldRef<"Employee", 'String'>
  readonly email: Prisma.FieldRef<"Employee", 'String'>
  readonly phone: Prisma.FieldRef<"Employee", 'String'>
  readonly createdAt: Prisma.FieldRef<"Employee", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Employee", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Employee findUnique
 */
export type EmployeeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * Filter, which Employee to fetch.
   */
  where: Prisma.EmployeeWhereUniqueInput
}

/**
 * Employee findUniqueOrThrow
 */
export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * Filter, which Employee to fetch.
   */
  where: Prisma.EmployeeWhereUniqueInput
}

/**
 * Employee findFirst
 */
export type EmployeeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * Filter, which Employee to fetch.
   */
  where?: Prisma.EmployeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Employees to fetch.
   */
  orderBy?: Prisma.EmployeeOrderByWithRelationInput | Prisma.EmployeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Employees.
   */
  cursor?: Prisma.EmployeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Employees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Employees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Employees.
   */
  distinct?: Prisma.EmployeeScalarFieldEnum | Prisma.EmployeeScalarFieldEnum[]
}

/**
 * Employee findFirstOrThrow
 */
export type EmployeeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * Filter, which Employee to fetch.
   */
  where?: Prisma.EmployeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Employees to fetch.
   */
  orderBy?: Prisma.EmployeeOrderByWithRelationInput | Prisma.EmployeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Employees.
   */
  cursor?: Prisma.EmployeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Employees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Employees.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Employees.
   */
  distinct?: Prisma.EmployeeScalarFieldEnum | Prisma.EmployeeScalarFieldEnum[]
}

/**
 * Employee findMany
 */
export type EmployeeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * Filter, which Employees to fetch.
   */
  where?: Prisma.EmployeeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Employees to fetch.
   */
  orderBy?: Prisma.EmployeeOrderByWithRelationInput | Prisma.EmployeeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Employees.
   */
  cursor?: Prisma.EmployeeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Employees from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Employees.
   */
  skip?: number
  distinct?: Prisma.EmployeeScalarFieldEnum | Prisma.EmployeeScalarFieldEnum[]
}

/**
 * Employee create
 */
export type EmployeeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * The data needed to create a Employee.
   */
  data: Prisma.XOR<Prisma.EmployeeCreateInput, Prisma.EmployeeUncheckedCreateInput>
}

/**
 * Employee createMany
 */
export type EmployeeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Employees.
   */
  data: Prisma.EmployeeCreateManyInput | Prisma.EmployeeCreateManyInput[]
}

/**
 * Employee createManyAndReturn
 */
export type EmployeeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * The data used to create many Employees.
   */
  data: Prisma.EmployeeCreateManyInput | Prisma.EmployeeCreateManyInput[]
}

/**
 * Employee update
 */
export type EmployeeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * The data needed to update a Employee.
   */
  data: Prisma.XOR<Prisma.EmployeeUpdateInput, Prisma.EmployeeUncheckedUpdateInput>
  /**
   * Choose, which Employee to update.
   */
  where: Prisma.EmployeeWhereUniqueInput
}

/**
 * Employee updateMany
 */
export type EmployeeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Employees.
   */
  data: Prisma.XOR<Prisma.EmployeeUpdateManyMutationInput, Prisma.EmployeeUncheckedUpdateManyInput>
  /**
   * Filter which Employees to update
   */
  where?: Prisma.EmployeeWhereInput
  /**
   * Limit how many Employees to update.
   */
  limit?: number
}

/**
 * Employee updateManyAndReturn
 */
export type EmployeeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * The data used to update Employees.
   */
  data: Prisma.XOR<Prisma.EmployeeUpdateManyMutationInput, Prisma.EmployeeUncheckedUpdateManyInput>
  /**
   * Filter which Employees to update
   */
  where?: Prisma.EmployeeWhereInput
  /**
   * Limit how many Employees to update.
   */
  limit?: number
}

/**
 * Employee upsert
 */
export type EmployeeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * The filter to search for the Employee to update in case it exists.
   */
  where: Prisma.EmployeeWhereUniqueInput
  /**
   * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
   */
  create: Prisma.XOR<Prisma.EmployeeCreateInput, Prisma.EmployeeUncheckedCreateInput>
  /**
   * In case the Employee was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmployeeUpdateInput, Prisma.EmployeeUncheckedUpdateInput>
}

/**
 * Employee delete
 */
export type EmployeeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
  /**
   * Filter which Employee to delete.
   */
  where: Prisma.EmployeeWhereUniqueInput
}

/**
 * Employee deleteMany
 */
export type EmployeeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Employees to delete
   */
  where?: Prisma.EmployeeWhereInput
  /**
   * Limit how many Employees to delete.
   */
  limit?: number
}

/**
 * Employee without action
 */
export type EmployeeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employee
   */
  select?: Prisma.EmployeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employee
   */
  omit?: Prisma.EmployeeOmit<ExtArgs> | null
}
